#+TITLE: Xilinx Vivado and Git
Using source version control with Xilinx Vivado.
Items under version control in a typical Xilinx Vivado FPGA project:
- Block Design
    Top level with automatically generated and managed wrapper The block design is
    the primary source to recreate the design The top level wrapper HDL file
    shouldn’t be under version control since it can be recreated from the block
    diagram. It is not generated automatically, but there is a simple script to
    get around it.

- Custom IP cores
    Custom IP cores that are not available in a Vivado software.


The folder layout looks like this:

.
└── Project
  ├── bd
  │   └── design_1
  ├── ip
  ├── Makefile
  ├── scripts
  │   ├── build_bitstream.tcl
  │   ├── build_fpga.sh
  │   ├── create_project_tcl.tcl
  │   └── recreate_prj.tcl
  ├── sdk
  ├── work
  └── xdc 

+ bd :: the block design file (.bd)
# + CI :: used fo continuous integration
+ ip :: custom IP repository
+ scripts :: TCL utility scripts
  * create_project.tcl :: calls the write_project_tcl Vivado command with the
       correct parameters for the folder structure, to store the generated file
       () in the scripts folder and modifies it to regenerate the top level
       wrapper file when executed.
+ work :: the temporary Vivado project files (not under version control)
+ xdc :: contains the constraint file

** Workflow:
*** Creating a Project
1. Create a new git local repository and add the files to it.
#+begin_src org 
$ git init
~/vivado-project-template-master/.git/
$ git add .
#+end_src

2. Create your Vivado project and use =work= as the target directory. Make sure
   "create new directory" is not selected.

3. Create the block design. The block design has the same name as the project
   and it shoul be saved in the bd directory.

4. Generate the top level wrapper and let Vivado manage it.

5. (optional) Add your custom IP in the ip folder and add the ip folder to the
   IP Repository in your block design.

6. Proceed with the design and when it is finished, from the Vivado TCL console,
   run the =create_project_tcl.tcl= to create a script that will re-generate the
   Vivado project.
#+begin_src org
source scripts/create_project_tcl.tcl
#+end_src

7. Close Vivado and add two files to the git repo: 
- the block design file 
- the script that was generated when we executed create_project_tcl
#+begin_src org
$ git add bd/design_1/design_1.bd
$ git add scripts/recreate_prj.tcl
$ git commit -am "Initial commit"
 create mode .gitignore
 create mode Makefile 
 create mode bd/.gitignore
 create mode bd/design_1/design_1.bd
 create mode scripts/create_project_tcl.tcl
 create mode scripts/recreate_prj.tcl
#+end_src

All the other files can be regenerated so they don’t need to be under version
control.

*** Re-create a Project 
To recreate the project simply run the Makefile.
#+begin_src org
make
#+end_src

Now the project is recreated in the =work= directory the minimum source code
files.

** Notes:
- The various scripts assume a folders tree as described above.
- Before launching =make=, the =work= folder must be deleted. This is "by
  design" since it avoids overwriting the project by mistake.
- The file =recreate_prj.tcl= must be under source version control.
- =.gitignore= files is used to avoid adding files generated by Vivado to the
  source version control repo.
